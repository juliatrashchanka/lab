#include<iostream>
#include<iomanip>
#include<string>
#include <string.h>
#include <stdlib.h>
#include <windows.h>
using namespace std;

class Virus  // абстрактный базовый класс
{
protected:
    string simmkaps;//симметрия капсоидов 
    string nalob;
public:
    Virus(string sim, string nal) // конструктор с параметрами
    {
        simmkaps = sim;
        nalob = nal;
    }
    virtual void Print() = 0;   // печать названия 	
};

class Desoksivirus : public Virus
{
protected:
    int kolvocepey;
    string typekisl;
public:
    Desoksivirus(int kolvo, string type, string sim, string nal) : Virus(sim, nal)
    {
         kolvocepey = kolvo;
         typekisl = type;
    }
    void Print()
    {
        cout << "Симметрия капсоидов: " << simmkaps << ";\nНаличие оболочки капсидов: " << nalob << ";\nКоличество цепей ДНК: " << kolvocepey << ";\nТип нуклеиновой кислоты: " << typekisl << endl;
    }
};
class Rybovirus : public Virus
{
protected:
    int gruppa;
    string bolezn;
public:
    Rybovirus(int grup, string bol, string sim, string nal) : Virus(sim, nal)
    {
         gruppa = grup;
        bolezn = bol;
    }
    void Print()
    {
        cout << "Симметрия капсоидов: " << simmkaps << ";\nНаличие оболочки капсидов: " << nalob << ";\nГруппа: " << gruppa << ";\nЗаболевание: " << bolezn << endl;
    }
};

class Unknow :public Virus
{
protected:
    int lifetime;
    int yearofo;
public:
    Unknow(int lt, int yofo, string sim, string nal) : Virus(sim, nal)
    {
         lifetime = lt;
         yearofo= yofo;
    }
    void Print()
    {
        cout << "Симметрия капсоидов: " << simmkaps << ";\nНаличие оболочки капсидов: " << nalob << ";\nПродолжительность жизни: " << lifetime << ";\nГод открытия: " << yearofo << endl;
    }

};
string correctString()
{
    bool tr;
    string str;
    do
    {
        tr = false;
        cin >> str;
        for (int i = 0; i < str.length(); i++)
        {
            if ((str[i] < 'А' || str[i] > 'я'))//&&(str[i] < 'а' && str[i] > 'я'))
            {
                tr = true;
                cout << "Некорректный ввод строки!\nПопробуйте снова: ";
               
                break;
            }
        }
    } while (tr);

    return str;
}

int Number()
{
    int number;
    cin >> number;

    while (cin.get() != '\n')
    {
        cout << "Некорректный ввод!" << endl;
        cout << "Введите снова: ";
        cin.clear();
        cin.ignore(256, '\n');
        cin >> number;
    }

    return number;
}

int main()
{
    setlocale(LC_ALL, "Russian");
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    int lt, yofo, kolvo, grup;
    string type, sim, nal,bol;
    Virus* ptr[3];

    cout << "Рибовирус" << endl;
    cout << "Введите симметрию капсоидов: "; sim = correctString();
    cout << "Введите наличие оболочки капсидов (отсутствует или имеется): ";  nal = correctString();
    cout << "Введите группу: "; grup = Number();;
    cout << "Введите заболевание: "; bol = correctString();
    cout << "--------------------------" << endl;
    Rybovirus r(grup, bol, sim, nal);
    cout << "Дезоксивирус" << endl;
    cout << "Введите симметрию капсоидов: "; sim = correctString();
    cout << "Введите наличие оболочки капсидов (отсутствует или имеется): ";  nal = correctString();
    cout << "Введите количество цепей ДНК: ";  kolvo = Number();
    cout << "Введите тип нуклеиновой кислоты: "; type = correctString();
    cout << "--------------------------" << endl;
    Desoksivirus d(kolvo,  type,  sim,  nal);
    cout << "Неизвестный" << endl;
    cout << "Введите симметрию капсоидов: "; sim = correctString();
    cout << "Введите наличие оболочки капсидов (отсутствует или имеется): ";  nal = correctString();
    cout << "Укажите продолжительность жизни (в сутках):";  lt = Number();
    cout << "Укажите год открытия:";  yofo = Number();
    cout << "--------------------------" << endl;
    Unknow u(lt,yofo, sim, nal);
    ptr[0] = &r;
    ptr[1] = &d; // инициализация массива указателей ptr
    ptr[2] = &u;
    for (int i = 0; i < 3; i++)
    {
        ptr[i]->Print();
        cout << "--------------------------" << endl;
    }
    return 0;
} 
